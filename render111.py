from flask import Flask, request, jsonify, send_file, render_template_string, redirect, url_for
import sqlite3

app = Flask(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
def create_db():
    conn = sqlite3.connect('ctf.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT, flag TEXT)")
    cursor.execute("INSERT OR IGNORE INTO users (username, password, flag) VALUES ('admin', 'admin!', 'flag{second_flag}')")
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    key = request.args.get("key")  # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "key"

    if key == "flag":
        return redirect(url_for('stage_2'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø 2
    elif key == "hidden_treasure":
        return redirect(url_for('stage_30'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø 3
    elif key == "CTF{final_hidden_flag}":
        return "<h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ</h1><p>–§–ª–∞–≥: CTF{final_hidden_flag}</p>"

    return render_template_string("""
        <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CTF!</h1>
        <p></p>
        <p>–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/?key=?</code></p>
        <!-- –ò–Ω–æ–≥–¥–∞ –±—Ä–∞—É–∑–µ—Ä —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ... -->



































































        <script src="/static/hint.js"></script>
    """)

# –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ —Ñ–ª–∞–≥–∞ —á–µ—Ä–µ–∑ SQL-–∏–Ω—ä–µ–∫—Ü–∏—é
@app.route("/stage2")
def stage_2():
    username = request.args.get("username")
    password = request.args.get("password")

    # –£—è–∑–≤–∏–º–æ—Å—Ç—å: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
    conn = sqlite3.connect('ctf.db')
    cursor = conn.cursor()

    # –≠—Ç–æ —É—è–∑–≤–∏–º—ã–π –∑–∞–ø—Ä–æ—Å! –û–Ω –ø–æ–¥–≤–µ—Ä–∂–µ–Ω SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
    query = f"SELECT flag FROM users WHERE username = '{username}' AND password = '{password}'"
    cursor.execute(query)

    flag = cursor.fetchone()

    conn.close()

    if flag:
        return render_template_string(f"""
            <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
            <p>–¢—ã –Ω–∞—à–µ–ª –≤—Ç–æ—Ä–æ–π —Ñ–ª–∞–≥: {flag[0]}</p>
            <p>–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ <a href="/stage_30">—Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–ø</a>.</p>
        """)
    else:
        return render_template_string("""
            <h1>–û—à–∏–±–∫–∞</h1>
            <p>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.>>>"!"<<<</p>
            <form action="/stage2" method="GET">
                                      <script src="FlaG{CTF_ASTANA_00x4}"></script>
                <input type="text" name="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <input type="password" name="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
                <input type="submit" value="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">

































                <script src="https://admin.com/"></script>
            </form>
        """)

# –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —á–µ—Ä–µ–∑ API
@app.route("/stage_30")
def stage_3():
    return render_template_string("""
        <h1>–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø</h1>
        
                                  








































































        <script src="/static/auth.js"></script>
    """)

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ (—Å–∫—Ä—ã—Ç—ã–π JavaScript)
@app.route("/static/hint.js")
def hint_js():
    return 'var a = "ZmxhZw=="; console.log(atob(a));', 200, {'Content-Type': 'application/javascript'}

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è API
@app.route("/static/auth.js")
def auth_js():
    return 'fetch("/secret/api/getflag", { headers: { "X-Secret-Key": "RkxBR19DT0RF" } });', 200, {'Content-Type': 'application/javascript'}

# API –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
@app.route("/secret/api/getflag")
def secret_api():
     if request.headers.get("X-Secret-Key") == "FLAG_C0DE":
       return jsonify({"flag": "CTF{final_hidden_flag}"})
     return jsonify({"error": "Unauthorized access"}), 403

   


# –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
@app.route("/static/secret.png")
def secret_png():
    return send_file("secret.png", mimetype="image/png")

if __name__ == "__main__":
    create_db()  # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
    app.run(debug=True)
